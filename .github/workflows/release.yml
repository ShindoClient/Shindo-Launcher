name: Build & Release Shindo Launcher (no third‑party actions)

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # --- Linux deps necessárias pro Tauri ---
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      # Rust via rustup (sem action de terceiros)
      - name: Setup Rust toolchain
        shell: bash
        run: |
          rustup --version || (echo "Rustup não encontrado" && exit 1)
          rustup toolchain install stable
          rustup default stable
          rustc --version
          cargo --version

      - name: Install deps
        run: npm ci

      - name: Build Tauri
        run: npm run tauri build

      # cria arquivo da chave privada a partir do secret
      - name: Write private key from secret
        shell: bash
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        run: |
          test -n "$TAURI_PRIVATE_KEY" || { echo "TAURI_PRIVATE_KEY não definido"; exit 1; }
          echo "$TAURI_PRIVATE_KEY" > private-key.pem

      # assina todos os bundles gerados (msi, dmg, AppImage, etc.)
      - name: Sign all bundles
        shell: bash
        run: |
          set -e
          shopt -s globstar nullglob
          files=(src-tauri/target/release/bundle/**/*)
          for f in "${files[@]}"; do
            [[ -f "$f" && "$f" != *.sig ]] || continue
            npx --yes @tauri-apps/cli signer sign --private-key-path private-key.pem "$f"
          done

      # gera latest.json com URLs da própria release
      - name: Generate latest.json
        shell: bash
        run: |
          set -e
          VERSION="${GITHUB_REF_NAME}"
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          REPO="${GITHUB_REPOSITORY}"

          WIN_FILE=$(ls src-tauri/target/release/bundle/msi/*.msi 2>/dev/null | head -n1 || true)
          LINUX_FILE=$(ls src-tauri/target/release/bundle/appimage/*.AppImage 2>/dev/null | head -n1 || true)
          MAC_FILE=$(ls src-tauri/target/release/bundle/dmg/*.dmg 2>/dev/null | head -n1 || true)

          WIN_SIG="";   [ -n "$WIN_FILE" ]   && WIN_SIG=$(tr -d '\n' < "${WIN_FILE}.sig")
          LINUX_SIG=""; [ -n "$LINUX_FILE" ] && LINUX_SIG=$(tr -d '\n' < "${LINUX_FILE}.sig")
          MAC_SIG="";   [ -n "$MAC_FILE" ]   && MAC_SIG=$(tr -d '\n' < "${MAC_FILE}.sig")

          cat > latest.json <<JSON
          {
            "version": "${VERSION}",
            "notes": "Nova versão do Shindo Launcher.",
            "pub_date": "${DATE}",
            "platforms": {
                           ${WIN_FILE:+\"windows-x86_64\": {\"signature\": \"${WIN_SIG}\", \"url\": \"https://github.com/${REPO}/releases/download/${VERSION}/$(basename "$WIN_FILE")\"}$([ -n "$LINUX_FILE$MAC_FILE" ] && echo ",")}
            ${LINUX_FILE:+\"linux-x86_64\": {\"signature\": \"${LINUX_SIG}\", \"url\": \"https://github.com/${REPO}/releases/download/${VERSION}/$(basename "$LINUX_FILE")\"}$([ -n "$MAC_FILE" ] && echo ",")}
            ${MAC_FILE:+\"darwin-x86_64\": {\"signature\": \"${MAC_SIG}\", \"url\": \"https://github.com/${REPO}/releases/download/${VERSION}/$(basename "$MAC_FILE")\"}}
            }
          }
          JSON
          echo "latest.json:"; cat latest.json

      # (opcional) guardar como artifact
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bundle-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/**/*
            latest.json

      # publica na release usando GH CLI (oficial)
      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        env:
          # use GH_PAT se você criou um PAT; senão usa o token padrão
          GITHUB_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          set -e
          VERSION="${GITHUB_REF_NAME}"
          echo "$GITHUB_TOKEN" | gh auth login --with-token
          gh release upload "$VERSION" \
            $(find src-tauri/target/release/bundle -type f) latest.json \
            --repo "$GITHUB_REPOSITORY" --clobber
