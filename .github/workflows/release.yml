name: Build & Release Shindo Launcher (no third‑party actions)

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Dependências extras no Linux
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          set -e
          sudo apt-get update
          if sudo apt-get install -y libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev; then
            echo "Usando webkit 4.1"
          else
            echo "webkit 4.1 não encontrado, usando 4.0"
            sudo apt-get install -y libwebkit2gtk-4.0-dev libjavascriptcoregtk-4.0-dev libsoup-2.4-dev
          fi
          sudo apt-get install -y \
            build-essential curl wget file pkg-config libssl-dev \
            libgtk-3-dev libglib2.0-dev librsvg2-dev patchelf
          sudo apt-get install -y libayatana-appindicator3-dev || sudo apt-get install -y libappindicator3-dev

      - name: Prepare dependencies
        run: |
          node -e "try{let p=require('./package.json'); if(p.devDependencies && p.devDependencies['@tauri-apps/cli']){delete p.devDependencies['@tauri-apps/cli']; require('fs').writeFileSync('package.json', JSON.stringify(p,null,2)); console.log('removed local @tauri-apps/cli');}}catch(e){console.log('no package.json or no local cli')}"
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install

      - name: Build Tauri
        run: npx --yes --package @tauri-apps/cli@latest tauri build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            src-tauri/target/release/bundle/**/*
            !**/*.dSYM

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Instalar CLI do GitHub para baixar artefatos
      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh jq

      # Baixar todos os artefatos dos jobs anteriores
      - name: Download artifacts from all OS builds
        run: |
          mkdir artifacts
          for OS in ubuntu-latest windows-latest macos-latest; do
            gh run list --workflow=Release --branch="${GITHUB_REF_NAME}" --json databaseId --limit 1 | jq -r '.[0].databaseId' | while read run_id; do
              gh run download "$run_id" --name "${OS}-artifacts" --dir artifacts
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Gerar latest.json
      - name: Generate latest.json
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          REPO="ShindoClient/Shindo-Launcher"

          WIN_FILE=$(find artifacts -type f -name "*.msi" -o -name "*.exe" | head -n 1)
          LINUX_FILE=$(find artifacts -type f -name "*.AppImage" -o -name "*.deb" | head -n 1)
          MAC_FILE=$(find artifacts -type f -name "*.dmg" -o -name "*.pkg" | head -n 1)

          echo "{" > latest.json
          echo "  \"version\": \"${VERSION}\"," >> latest.json
          echo "  \"notes\": \"Nova versão do Shindo Launcher.\"," >> latest.json
          echo "  \"pub_date\": \"${DATE}\"," >> latest.json
          echo "  \"platforms\": {" >> latest.json

          FIRST=true
          if [ -n "$WIN_FILE" ]; then
            SIG=$(shasum -a 256 "$WIN_FILE" | cut -d ' ' -f 1)
            echo "    \"windows-x86_64\": {\"signature\": \"${SIG}\", \"url\": \"https://github.com/${REPO}/releases/download/${VERSION}/$(basename "$WIN_FILE")\"}" >> latest.json
            FIRST=false
          fi
          if [ -n "$LINUX_FILE" ]; then
            [ "$FIRST" = false ] && echo "," >> latest.json
            SIG=$(shasum -a 256 "$LINUX_FILE" | cut -d ' ' -f 1)
            echo "    \"linux-x86_64\": {\"signature\": \"${SIG}\", \"url\": \"https://github.com/${REPO}/releases/download/${VERSION}/$(basename "$LINUX_FILE")\"}" >> latest.json
            FIRST=false
          fi
          if [ -n "$MAC_FILE" ]; then
            [ "$FIRST" = false ] && echo "," >> latest.json
            SIG=$(shasum -a 256 "$MAC_FILE" | cut -d ' ' -f 1)
            echo "    \"darwin-x86_64\": {\"signature\": \"${SIG}\", \"url\": \"https://github.com/${REPO}/releases/download/${VERSION}/$(basename "$MAC_FILE")\"}" >> latest.json
          fi

          echo "  }" >> latest.json
          echo "}" >> latest.json

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/* 
            latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
